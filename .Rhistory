if (a < 0) {
# This will reverse the direction of rotation (from clockwise to counterclockwise)
clockwise = if(clockwise) FALSE else TRUE;
a = abs(a);
}
div = a %% 360;
switch(as.character(div),
"90" = rotateMatrix90(matrix, clockwise),
"180" = rotateMatrix180(matrix, clockwise),
"270" = rotateMatrix270(matrix, clockwise),
matrix
);
}
rotAngleMatrix = rotateMatrixAngle(myMatrix, 90)
rotateMatrixAngle= function(matrix, angle = 0, clockwise = T) {
rem = a %% 90;
if (rem != 0) {
stop("Not a valid angle!");
}
if (a < 0) {
# This will reverse the direction of rotation (from clockwise to counterclockwise)
clockwise = if(clockwise) FALSE else TRUE;
a = abs(a);
}
div = a %% 360;
switch(as.character(div),
"90" = rotateMatrix90(matrix, clockwise),
"180" = rotateMatrix180(matrix, clockwise),
"270" = rotateMatrix270(matrix, clockwise),
matrix
);
}
rotAngleMatrix = rotateMatrixAngle(myMatrix, 90,)
rotateMatrixAngle= function(matrix, angle = 0, clockwise = T) {
rem = a %% 90;
if (rem != 0) {
stop("Not a valid angle!");
}
if (a < 0) {
# This will reverse the direction of rotation (from clockwise to counterclockwise)
clockwise = if(clockwise) FALSE else TRUE;
a = abs(a);
}
div = a %% 360;
switch(as.character(div),
"90" = rotateMatrix90(matrix, clockwise),
"180" = rotateMatrix180(matrix, clockwise),
"270" = rotateMatrix270(matrix, clockwise),
matrix
);
}
rotAngleMatrix = rotateMatrixAngle(myMatrix, 90, clockwise)
rotateMatrixAngle= function(matrix, angle = 0, clockwise = T) {
rem = angle %% 90;
if (rem != 0) {
stop("Not a valid angle!");
}
if (angle < 0) {
# This will reverse the direction of rotation (from clockwise to counterclockwise)
clockwise = if(clockwise) FALSE else TRUE;
angle = abs(angle);
}
div = a %% 360;
switch(as.character(div),
"90" = rotateMatrix90(matrix, clockwise),
"180" = rotateMatrix180(matrix, clockwise),
"270" = rotateMatrix270(matrix, clockwise),
matrix
);
}
rotAngleMatrix = rotateMatrixAngle(myMatrix, 90)
rotateMatrixAngle= function(matrix, angle = 0, clockwise = T) {
rem = angle %% 90;
if (rem != 0) {
stop("Not a valid angle!");
}
if (angle < 0) {
# This will reverse the direction of rotation (from clockwise to counterclockwise)
clockwise = if(clockwise) FALSE else TRUE;
angle = abs(angle);
}
div = a %% 360;
switch(as.character(div),
"90" = rotateMatrix90(matrix, clockwise),
"180" = rotateMatrix180(matrix, clockwise),
"270" = rotateMatrix270(matrix, clockwise),
matrix
);
}
rotAngleMatrix = rotateMatrixAngle(myMatrix, 90)
rotateMatrixAngle= function(matrix, angle = 0, clockwise = T) {
rem = angle %% 90;
if (rem != 0) {
stop("Not a valid angle!");
}
if (angle < 0) {
# This will reverse the direction of rotation (from clockwise to counterclockwise)
clockwise = if(clockwise) FALSE else TRUE;
angle = abs(angle);
}
div = a %% 360;
switch(as.character(div),
"90" = rotateMatrix90(matrix, clockwise),
"180" = rotateMatrix180(matrix, clockwise),
"270" = rotateMatrix270(matrix, clockwise),
matrix
);
}
rotAngleMatrix = rotateMatrixAngle(myMatrix, 90)
rotateMatrixAngle= function(matrix, angle = 0, clockwise = T) {
rem = angle %% 90;
if (rem != 0) {
stop("Not a valid angle!");
}
if (angle < 0) {
# This will reverse the direction of rotation (from clockwise to counterclockwise)
clockwise = if(clockwise) FALSE else TRUE;
angle = abs(angle);
}
div = angle %% 360;
switch(as.character(div),
"90" = rotateMatrix90(matrix, clockwise),
"180" = rotateMatrix180(matrix, clockwise),
"270" = rotateMatrix270(matrix, clockwise),
matrix
);
}
rotAngleMatrix = rotateMatrixAngle(myMatrix, 90)
library(devtools);
my.source = 'local';
local.path = "/Users/christophermims/_git_/WSU_STATS419_FALL2020/";
source( paste0(local.path,"functions/libraries.R"), local=T );
local.path = "/Users/christophermims/_git_/WSU_STATS419_FALL2020/";
source( paste0(local.path,"functions/functions-matrix.R"), local=T );
myMatrix = matrix ( c (
1, 0, 2,
0, 3, 0,
4, 0, 5
), nrow = 3, byrow = T);
myMatrix
transposeMatrix = function(matrix) {
t(matrix);
}
transMatrix = transposeMatrix(myMatrix);
transMatrix
rotateMatrix = function(matrix, clockwise = T) {
if (clockwise) {
t(apply(matrix, 2, rev));
}
else {
apply(t(matrix), 2, rev);
}
}
rotMatrix = rotateMatrix(myMatrix);
rotMatrix
rotateMatrix90= function(matrix, clockwise = T) {
rotateMatrix(matrix, clockwise);
}
rot90Matrix = rotateMatrix90(myMatrix)
rot90Matrix
rotateMatrix180= function(matrix, clockwise = T) {
rotateMatrix(
rotateMatrix(
matrix));
}
rot180Matrix = rotateMatrix180(myMatrix)
rot180Matrix
rotateMatrix270= function(matrix, clockwise = T) {
rotateMatrix(
rotateMatrix(
rotateMatrix(
matrix)));
}
rot270Matrix = rotateMatrix270(myMatrix)
rot270Matrix
rotateMatrixAngle= function(matrix, angle = 0, clockwise = T) {
rem = angle %% 90;
if (rem != 0) {
stop("Not a valid angle!");
}
if (angle < 0) {
# This will reverse the direction of rotation (from clockwise to counterclockwise)
clockwise = if(clockwise) FALSE else TRUE;
angle = abs(angle);
}
div = angle %% 360;
switch(as.character(div),
"90" = rotateMatrix90(matrix, clockwise),
"180" = rotateMatrix180(matrix, clockwise),
"270" = rotateMatrix270(matrix, clockwise),
matrix
);
}
rotAngleMatrix = rotateMatrixAngle(myMatrix, 90)
rotAngleMatrix
rotAngleMatrix = rotateMatrixAngle(myMatrix, 180)
rotAngleMatrix
rotAngleMatrix = rotateMatrixAngle(myMatrix, 270)
rotAngleMatrix
rotAngleMatrix = rotateMatrixAngle(myMatrix, 220)
rotateMatrixAngle= function(matrix, angle = 0, clockwise = T) {
rem = angle %% 90;
if (rem != 0) {
print("Not a valid angle!");
}
if (angle < 0) {
# This will reverse the direction of rotation (from clockwise to counterclockwise)
clockwise = if(clockwise) FALSE else TRUE;
angle = abs(angle);
}
div = angle %% 360;
switch(as.character(div),
"90" = rotateMatrix90(matrix, clockwise),
"180" = rotateMatrix180(matrix, clockwise),
"270" = rotateMatrix270(matrix, clockwise),
matrix
);
}
rotAngleMatrix = rotateMatrixAngle(myMatrix, 90)
rotAngleMatrix
rotAngleMatrix = rotateMatrixAngle(myMatrix, 180)
rotAngleMatrix
rotAngleMatrix = rotateMatrixAngle(myMatrix, 270)
rotAngleMatrix
rotAngleMatrix = rotateMatrixAngle(myMatrix, 220)
rotAngleMatrix
rotAngleMatrix = rotateMatrixAngle(myMatrix, -90)
rotAngleMatrix
plot(~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
bg=c("red", "green3", "blue")[as.integer(Species)],
pch=21,
main="Iris Data (red=setosa,green=versicolor,blue=virginica)",
data=iris)
df.personality.clean = read.csv(local.path"/WEEK-03/datasets/personality-raw.txt", sep='|', header = T);
df.personality.clean = read.csv(local.path,"/WEEK-03/datasets/personality-raw.txt", sep='|', header = T);
df.personality.clean = read.csv(local.path "/WEEK-03/datasets/personality-raw.txt", sep='|', header = T);
df.personality.clean = read.csv("local.path '/WEEK-03/datasets/personality-raw.txt', sep='|', header = T);
df.personality.clean = read.csv(local.path/WEEK-03/datasets/personality-raw.txt, sep='|', header = T);
df.personality.clean = read.csv(paste0(local.path, "/WEEK-03/datasets/personality-raw.txt", sep='|', header = T));
df.personality-clean = read.csv(paste0(local.path, "WEEK-03/datasets/personality-raw.txt", sep='|', header = T));
df.personality-clean = read.csv("./WEEK-03/datasets/personality-raw.txt", sep='|', header = T);
df.personality-clean = read.csv("WEEK-03/datasets/personality-raw.txt", sep='|', header = T);
?read.csv
df.personality-clean = read.csv('WEEK-03/datasets/personality-raw.txt', sep='|', header = T);
df.personality-clean = read.csv('personality-raw.txt', sep='|', header = T);
df.personality-clean = read.csv("/WEEK-03/datasets/personality-raw.txt"), sep='|', header = T);
df.personality-clean = read.csv("/WEEK-03/datasets/personality-raw.txt", sep='|', header = T);
df.personality-clean = read.csv("/WEEK-03/datasets/personality-raw.txt");
df.personality-clean = read.csv("/WEEK-03/datasets/personality-raw.txt");
df.personality-clean = read.csv(paste0(local.path, "/WEEK-03/datasets/personality-raw.txt");
df.personality-clean = read.csv(paste0(local.path, "/WEEK-03/datasets/personality-raw.txt")
df.personality-clean = read.csv(paste0(local.path, "/WEEK-03/datasets/personality-raw.txt", sep="|", header=T)
df.personality-clean = read.csv(paste0(local.path, "WEEK-03/datasets/personality-raw.txt", sep="|", header=T)
df.personality-clean = read.csv(paste0(local.path, "WEEK-03/datasets/personality-raw.txt", sep="|", header=T))
df.personality-clean = read.csv(paste0(local.path, "WEEK-03/datasets/personality-raw", sep="|", header=T))
df.personality-clean = read.csv(paste0(local.path, "WEEK-03/datasets/personality-raw.txt", sep="|", header=T))
ls
library(devtools);
my.source = 'local';
local.path = "/Users/christophermims/_git_/WSU_STATS419_FALL2020/";
source( paste0(local.path,"functions/libraries.R"), local=T );
local.path = "/Users/christophermims/_git_/WSU_STATS419_FALL2020/";
source( paste0(local.path,"functions/functions-matrix.R"), local=T );
myMatrix = matrix ( c (
1, 0, 2,
0, 3, 0,
4, 0, 5
), nrow = 3, byrow = T);
myMatrix
transposeMatrix = function(matrix) {
t(matrix);
}
transMatrix = transposeMatrix(myMatrix);
transMatrix
rotateMatrix = function(matrix, clockwise = T) {
if (clockwise) {
t(apply(matrix, 2, rev));
}
else {
apply(t(matrix), 2, rev);
}
}
rotMatrix = rotateMatrix(myMatrix);
rotMatrix
rotateMatrix90= function(matrix, clockwise = T) {
rotateMatrix(matrix, clockwise);
}
rot90Matrix = rotateMatrix90(myMatrix)
rot90Matrix
rotateMatrix180= function(matrix, clockwise = T) {
rotateMatrix(
rotateMatrix(
matrix));
}
rot180Matrix = rotateMatrix180(myMatrix)
rot180Matrix
rotateMatrix270= function(matrix, clockwise = T) {
rotateMatrix(
rotateMatrix(
rotateMatrix(
matrix)));
}
rot270Matrix = rotateMatrix270(myMatrix)
rot270Matrix
rotateMatrixAngle= function(matrix, angle = 0, clockwise = T) {
rem = angle %% 90;
if (rem != 0) {
print("Not a valid angle!");
}
if (angle < 0) {
# This will reverse the direction of rotation (from clockwise to counterclockwise)
clockwise = if(clockwise) FALSE else TRUE;
angle = abs(angle);
}
div = angle %% 360;
switch(as.character(div),
"90" = rotateMatrix90(matrix, clockwise),
"180" = rotateMatrix180(matrix, clockwise),
"270" = rotateMatrix270(matrix, clockwise),
matrix
);
}
rotAngleMatrix = rotateMatrixAngle(myMatrix, 90)
rotAngleMatrix
rotAngleMatrix = rotateMatrixAngle(myMatrix, 180)
rotAngleMatrix
rotAngleMatrix = rotateMatrixAngle(myMatrix, 270)
rotAngleMatrix
rotAngleMatrix = rotateMatrixAngle(myMatrix, 220)
rotAngleMatrix
rotAngleMatrix = rotateMatrixAngle(myMatrix, -90)
rotAngleMatrix
plot(~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
bg=c("red", "green3", "blue")[as.integer(Species)],
pch=21,
main="Iris Data (red=setosa,green=versicolor,blue=virginica)",
data=iris)
df.personality-clean = read.csv(paste0(local.path, "WEEK-03/datasets/personality-raw.txt", sep="|", header=T))
getwd()
df.personality-clean = read.csv(paste0(local.path, "/WEEK-03/datasets/personality-raw.txt", sep="|", header=T))
df.personality-clean = read.csv("WEEK-03/datasets/personality-raw.txt", sep="|", header=T)
df.personality-clean = read.csv("./WEEK-03/datasets/personality-raw.txt", sep="|", header=T)
df.personality-clean = read.csv("/WEEK-03/datasets/personality-raw.txt", sep="|", header=T)
df.personality-clean = read.csv("/WEEK-03/datasets/personality-raw.txt", sep="|", header=T)
df.personality-clean = read.csv("WEEK-03/datasets/personality-raw.txt", sep="|", header=T)
getwd()
pwd()
print(getwd())
df.personality-clean = read.csv("./WEEK-03/datasets/personality-raw.txt", sep="|", header=T)
df.personality-clean = read.csv(paste0(local.path("WEEK-03/datasets/personality-raw.txt", sep="|", header=T)))
df.personality-clean = read.csv("/Users/christophermims/_git_/WSU_STATS419_FALL2020/WEEK-03/datasets/personality-raw.txt", sep="|", header=T)
df.personalityclean = read.csv("/Users/christophermims/_git_/WSU_STATS419_FALL2020/WEEK-03/datasets/personality-raw.txt", sep="|", header=T)
View(df.personalityclean)
df.personalityclean = read.csv("/Users/christophermims/_git_/WSU_STATS419_FALL2020/WEEK-03/datasets/personality-raw.txt", sep="|", header=T)
print(getwd())
df.personalityclean = read.csv("datasets/personality-raw.txt", sep="|", header=T)
View(df.personalityclean)
df.personality.clean = read.csv("datasets/personality-raw.txt", sep="|", header=T)
df.personality.clean = subset(df.personality.raw, select = -c("VOO"))
df.personality.raw = read.csv("datasets/personality-raw.txt", sep="|", header=T)
df.personality.clean = subset(df.personality.raw, select = -c("VOO"))
View(df.personality.raw)
df.personality.clean = subset(df.personality.raw, select = -c(3))
View(df.personality.clean)
View(df.personality.clean)
View(df.personality.clean)
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.clean %>%
separate(df.personality.clean, c("YEAR"), drop)%>%
df.personality.clean[WEEK] = strftime(c(df.personality.clean$YEAR))%>%
df.personality.clean[, colnames(df.personality.clean)[c(1:2, 63, 3:62)]]
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.clean %>%
separate(df.personality.clean, c("YEAR"), drop)%>%
df.personality.clean[WEEK] = strftime(c(df.personality.clean$YEAR)) %>%
df.personality.clean[, colnames(df.personality.clean)[c(1:2, 63, 3:62)]]
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.clean %>%
separate(df.personality.clean, c("YEAR"), drop)%>%
df.personality.clean[WEEK] = strftime(c(df.personality.clean$YEAR)) %>%
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.clean %>%
separate(df.personality.clean, c("YEAR"), drop)%>%
df.personality.clean[WEEK] = strftime(c(df.personality.clean$YEAR))
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.clean = separate(df.personality.clean, c("YEAR"), drop)
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.clean %>% separate(df.personality.clean, c("YEAR"), drop)
library(devtools);
my.source = 'local';
local.path = "/Users/christophermims/_git_/WSU_STATS419_FALL2020/";
source( paste0(local.path,"functions/libraries.R"), local=T );
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.clean %>% separate(df.personality.clean, c("YEAR"), drop)
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.clean %>% separate(df.personality.clean,c[2], c("YEAR"), drop)
df.personality.clean = subset(df.personality.raw, select = -c(3))
as.data.frame(df.personality.clean) %>% separate(df.personality.clean, into = paste("YEAR", sep = " ", drop))
df.personality.clean = subset(df.personality.raw, select = -c(3))
as.data.frame(df.personality.clean) %>% separate(c[2], into = paste("YEAR", sep = " ", drop))
df.personality.clean = subset(df.personality.raw, select = -c(3))
as.data.frame(df.personality.clean) %>% separate(df.personality.clean[2], into = paste("YEAR", sep = " ", drop))
df.personality.clean = subset(df.personality.raw, select = -c(3))
separate(df.personality.clean, date_test, into = c("YEAR", drop))
df.personality.clean = subset(df.personality.raw, select = -c(3))
separate(df.personality.clean, date_test, into = c("YEAR"), drop)
df.personality.clean = subset(df.personality.raw, select = -c(3))
separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ", drop)
df.personality.clean = subset(df.personality.raw, select = -c(3))
separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
df.personality.clean = subset(df.personality.raw, select = -c(3))
separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
df.personality.clean[WEEK] = strftime(c(df.personality.clean$YEAR))
df.personality.clean = subset(df.personality.raw, select = -c(3))
separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
df.personality.clean[WEEK] = strftime(c(df.personality.clean$YEAR))
df.personality.clean = subset(df.personality.raw, select = -c(3))
separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
df.personality.clean[WEEK] = strftime(c(df.personality.clean$YEAR))
df.personality.clean = subset(df.personality.raw, select = -c(3))
separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
df.personality.clean[WEEK] = strftime(c(df.personality.clean$YEAR))
df.personality.clean = subset(df.personality.raw, select = -c(3))
separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
df.personality.clean$WEEK = strftime(c(df.personality.clean$YEAR))
df.personality.clean = subset(df.personality.raw, select = -c(3))
separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
df.personality.clean = transform(df.personality.clean, WEEK = strftime(c(df.personality.clean$YEAR)))
df.personality.clean = subset(df.personality.raw, select = -c(3))
separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
df.personality.clean$WEEK = with(df.personality.clean, strftime(c(df.personality.clean$YEAR)))
View(df.personality.clean)
df.personality.clean = subset(df.personality.raw, select = -c(3))%>%
separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.clean = separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
View(df.personality.clean)
View(df.personality.clean)
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.clean = separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
df.personality.clean$WEEK <- strftime(df.personality.clean$YEAR, format = "%m-%d-%Y")
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.clean = separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
df.personality.clean$WEEK <- strftime(c(df.personality.clean$YEAR), format = %V)
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.clean = separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
df.personality.clean$WEEK <- strftime(df.personality.clean$YEAR, format = %V)
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.clean = separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
df.personality.clean$WEEK <- strftime(df.personality.clean$YEAR, format = "%V")
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.clean = separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
df.personality.clean$WEEK <- strftime(df.personality.clean$YEAR, format = %V)
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.clean = separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
df.personality.clean$WEEK <- strftime(as.date(df.personality.clean$YEAR, format = "%Y-%m-%d"), format = %V)
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.clean = separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
df.personality.clean$YEAR <- as.Date(df.personality.clean$YEAR)
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.clean = separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
df.personality.clean$WEEK <- strftime(df.personality.clean$YEAR, format = "%V")
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.clean = separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.raw = read.csv("datasets/personality-raw.txt", sep="|", header=T)
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.clean = separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
View(df.personality.clean)
df.personality.clean = subset(df.personality.raw, select = -c(3))
df.personality.clean = separate(df.personality.clean, date_test, into = c("YEAR"), sep= " ")
df.personality.clean$WEEK = strftime(df.personality.clean$YEAR, format = %V)
View(df.personality.clean)
removeColumnsFromDF = function(dataFrame, deleteCol) {
for(deleteCol in deleteCol) {
df[deleteCol] = NULL;
}
df;
}
myCol = "V00"
df.personality.clean = removeColumnsFromDF(df.personality.raw, myCol)
removeColumnsFromDF = function(dataFrame, deleteCol) {
for(deleteCol in deleteCol) {
df[deleteCol] = NULL;
}
df;
}
myCol = "V00";
df.personality.clean = removeColumnsFromDF(df.personality.raw, myCol)
removeColumnsFromDF = function(dataFrame, deleteCol) {
for(deleteCol in deleteCol) {
dataFrame[deleteCol] = NULL;
}
dataFrame;
}
myCol = "V00";
df.personality.clean = removeColumnsFromDF(df.personality.raw, myCol)
View(df.personality.clean)
df.personality.raw = read.csv("datasets/personality-raw.txt", sep="|", header=T)
removeColumnsFromDF = function(dataFrame, deleteCol) {
for(deleteCol in deleteCol) {
dataFrame[deleteCol] = NULL;
}
dataFrame;
}
myCol = "V00";
df.personality.clean = removeColumnsFromDF(df.personality.raw, myCol)
View(df.personality.clean)
library(devtools);
my.source = 'local';
local.path = "/Users/christophermims/_git_/WSU_STATS419_FALL2020/";
source( paste0(local.path,"functions/libraries.R"), local=T );
